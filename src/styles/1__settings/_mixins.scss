// Colors
@function color($color-name, $color-variant: 'base') {
    @return map-get(map-get($colors, $color-name), $color-variant);
}

// Add percentage of white to a color
@function tint($color, $percent) {
    @return mix(white, $color, $percent);
}

// Add percentage of black to a color
@function shade($color, $percent) {
    @return mix(black, $color, $percent);
}

// Font family and weights
@mixin font($font-family: base, $weight: null) {
    $family: map-get($fonts, $font-family);
    @if $weight {
        @if map-has-key($family, $weight) {
            $f-weight: map-get($family, $weight);

            @if (length($f-weight) > 1) {
                font-family: nth($f-weight, 2), map-get($family, fallback);
                font-weight: nth($f-weight, 1);
            } @else {
                font-family: map-get($family, font), map-get($family, fallback);
                font-weight: $f-weight;
            }
        } @else {
            font-family: map-get($family, font), map-get($family, fallback);
        }
    } @else {
        font-family: map-get($family, font), map-get($family, fallback);
    }
}

@mixin font-size($size: base, $skip-line-height: false) {
    $fs-breakpoints: $breakpoints;
    $fs-map: map-get($font-size, $size);

    @each $fs-breakpoint, $fs-font-size in $fs-map {
        @if $fs-breakpoint == base {
            @include make-font-size($fs-font-size, $skip-line-height);
        } @else {
            @if map-has-key($fs-breakpoints, $fs-breakpoint) {
                $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
            }
            @media screen and (min-width: $fs-breakpoint) {
                @include make-font-size($fs-font-size, $skip-line-height);
            }
        }
    }
}

@mixin make-font-size($fs-font-size, $skip-line-height: false) {
    @if (type-of($fs-font-size) == 'list') {
        font-size: nth($fs-font-size, 1);

        @if ($skip-line-height != true and length($fs-font-size) > 1) {
            line-height: nth($fs-font-size, 2);
        }
    } @else {
        font-size: $fs-font-size;

        @if ($skip-line-height != true) {
            line-height: nth($fs-font-size, 2);
        }
    }
}

// Input placeholder
@mixin input-placeholder {
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}

// Media queries
@mixin min-width($name) {
    @if not map-has-key($breakpoints, $name) {
        @media (min-width: $name) {
            @content;
        }
    } @else {
        @media (min-width: map-get($breakpoints, $name)) {
            @content;
        }
    }
}

// Animation delay for childs
@mixin animation-delay($count, $delay, $initial: 0) {
    animation-delay: (($count + 1) * $delay) + $initial;

    @for $i from 1 through $count {
        &:nth-child(#{$i}) {
            animation-delay: ($i * $delay) + $initial;
        }
    }
}

// Full-width
@mixin full-width {
    position: relative;
    width: 100vw;
    left: 50%;
    right: 50%;
    margin-left: -50vw;
    margin-right: -50vw;
}

// No select
@mixin no-select {
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    -o-user-select: none;
    user-select: none;

    -webkit-user-drag: none;
    -moz-user-drag: none;
    user-drag: none;
}

// Screenreaders only
@mixin screenreaders-only($breakpoint: null) {
    @if ($breakpoint != null) {
        @include min-width($breakpoint) {
            position: absolute;
            overflow: hidden;
            width: 1px;
            height: 1px;
        }
    } @else {
        position: absolute;
        overflow: hidden;
        width: 1px;
        height: 1px;
    }
}

// Hyphens: use with care...
@mixin hyphens {
    overflow-wrap: break-word;
    word-break: break-word;
    hyphens: auto;
}

// Hyphens: use with care...
@mixin text-overflow {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 100%;
}

// Hyphens: use with care...
@mixin container($size: base, $unspaced: false) {
    max-width: map-get($container-width, $size);

    @if ($unspaced == false) {
        padding-left: $spacing--small;
        padding-right: $spacing--small;

        @include min-width(lg) {
            padding-left: $spacing;
            padding-right: $spacing;
        }
    }

    margin-left: auto;
    margin-right: auto;
}

@mixin text-stroke($width, $color) {
    $shadow: ();
    @for $i from -$width through $width {
        $shadow: append($shadow, #{$width}px #{$i}px $color, comma);
        $shadow: append($shadow, #{-$width}px #{$i}px $color, comma);
        $shadow: append($shadow, #{$i}px #{$width}px $color, comma);
        $shadow: append($shadow, #{$i}px #{-$width}px $color, comma);
    }
    text-shadow: $shadow;
}
